import java.io.*;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.Scanner;

public class DNSClient {
    private static final String DNS_SERVER_ADDRESS = "a.root-servers.net";
    private static final int DNS_SERVER_PORT = 53;

    public static void main(String[] args) throws IOException {
        Map<String, Integer> myaddress = new HashMap<String, Integer>();
        Map<String, String> result = new HashMap<String, String>();
        Scanner scan = new Scanner(System.in);
        ArrayList<String> domains = new ArrayList<>();
        BufferedWriter writer = Files.newBufferedWriter(Paths.get("result.csv"));
        while (true) {

            String approach = null;
            String domain = null;
            short requestType = 0x0001;;
            if (domains.isEmpty()){
                System.out.println("Enter a number according to the following options");
                System.out.println("1 : Enter a name address");
                System.out.println("2 : Enter address through a CSV file");
                System.out.println("3 : Exit");
            approach = scan.nextLine();
                //System.out.println(approach);
            if (approach.equals("1")) {
                System.out.println("Enter name address");
                domain = scan.nextLine();
            }
            if (approach.equals("2")) {
                    Scanner sc = new Scanner(new File("IP.csv"));
                    while (sc.hasNext())  //returns a boolean value
                    {
                        domains.add(sc.next());
                    }
                    domain = domains.get(0);
                    domains.remove(0);
                    sc.close();  //closes the scanner
                }
            if (approach.equals("3")){
                writer.close();
                System.exit(0);
            }
                System.out.println("Enter the type of Interest");
            String typeOfInterest = scan.nextLine();
            if(typeOfInterest.equals("A"))
                requestType = 0x0001;
            if(typeOfInterest.equals("AAAA"))
                requestType = 0x001c;
             if(typeOfInterest.equals("CNAME"))
                requestType = 0x0005;

        }
            else {
                domain = domains.get(0);
                domains.remove(0);
            }



            if (!myaddress.containsKey(domain))
                myaddress.put(domain, 1);
             else {
                int iteration = myaddress.get(domain) + 1;
                myaddress.replace(domain, iteration);
            }
            ArrayList<String> destinationArray = new ArrayList<String>();
            destinationArray.add(DNS_SERVER_ADDRESS);
            while (true) {
                if(myaddress.containsKey(domain) && result.containsKey(domain)){
                    if(myaddress.get(domain) >= 4) {
                        System.out.println(result.get(domain));
                        break;
                    }
                }
                InetAddress ipAddress = InetAddress.getByName(destinationArray.get(destinationArray.size() - 1));
                System.out.println("go to :");
                System.out.println(ipAddress);
                destinationArray.remove(destinationArray.size() - 1);
                ByteArrayOutputStream baos = new ByteArrayOutputStream();
                DataOutputStream dos = new DataOutputStream(baos);

                // *** Build a DNS Request Frame ****

                // Identifier: A 16-bit identification field generated by the device that creates the DNS query.
                // It is copied by the server into the response, so it can be used by that device to match that
                // query to the corresponding reply received from a DNS server. This is used in a manner similar
                // to how the Identifier field is used in many of the ICMP message types.
                //identifier
                dos.writeShort(0x1234);

                // Write Query Flags
                dos.writeShort(0x0100);

                // Question Count: Specifies the number of questions in the Question section of the message.
                dos.writeShort(0x0001);

                // Answer Record Count: Specifies the number of resource records in the Answer section of the message.
                dos.writeShort(0x0000);

                // Authority Record Count: Specifies the number of resource records in the Authority section of
                // the message. (“NS” stands for “name server”)
                dos.writeShort(0x0000);

                // Additional Record Count: Specifies the number of resource records in the Additional section of the message.
                dos.writeShort(0x0000);

                String[] domainParts = domain.split("\\.");
                System.out.println(domain + " has " + domainParts.length + " parts");

                for (int i = 0; i < domainParts.length; i++) {
                    System.out.println("Writing: " + domainParts[i]);
                    byte[] domainBytes = domainParts[i].getBytes("UTF-8");
                    dos.writeByte(domainBytes.length);
                    dos.write(domainBytes);
                }

                // No more parts
                dos.writeByte(0x00);

                // Type 0x01 = A (Host Request)
                dos.writeShort(requestType);

                // Class 0x01 = IN
                dos.writeShort(0x0001);

                byte[] dnsFrame = baos.toByteArray();

                System.out.println("Sending: " + dnsFrame.length + " bytes");
                for (int i = 0; i < dnsFrame.length; i++) {
                    System.out.print("0x" + String.format("%x", dnsFrame[i]) + " ");
                }

                // *** Send DNS Request Frame ***
                DatagramSocket socket = new DatagramSocket();
                DatagramPacket dnsReqPacket = new DatagramPacket(dnsFrame, dnsFrame.length, ipAddress, DNS_SERVER_PORT);
                socket.send(dnsReqPacket);
                // Await response from DNS server
                byte[] buf = new byte[1024];
                DatagramPacket packet = new DatagramPacket(buf, buf.length);
                socket.receive(packet);
                System.out.println("\n\nReceived: " + packet.getLength() + " bytes");
                for (int i = 0; i < packet.getLength(); i++) {
                    System.out.print(" 0x" + String.format("%x", buf[i]) + " ");
                }
                System.out.println("\n");


                DataInputStream din = new DataInputStream(new ByteArrayInputStream(buf));
                System.out.println("Transaction ID: 0x" + String.format("%x", din.readShort()));
                System.out.println("Flags: 0x" + String.format("%x", din.readShort()));
                System.out.println("Questions: 0x" + String.format("%x", din.readShort()));
                short answer = din.readShort();
                System.out.println("Answers RRs: 0x" + String.format("%x", answer));
                short authority = din.readShort();
                System.out.println("Authority RRs: 0x" + String.format("%x", authority));
                short additional = din.readShort();
                System.out.println("Additional RRs: 0x" + String.format("%x", additional));
                Map<Integer, String> myPointer = new HashMap<Integer, String>();
                int recLen = 0;
                int pointerCounter = 0;
                while ((recLen = din.readByte()) > 0) {
                    byte[] record = new byte[recLen];

                    for (int i = 0; i < recLen; i++) {
                        record[i] = din.readByte();
                    }
                    String parseRes = new String(record, "UTF-8");
                    myPointer.put(pointerCounter, parseRes);
                    pointerCounter = pointerCounter + recLen + 1;
                    System.out.println("Record: " + parseRes);
                }

                System.out.println("Record Type: 0x" + String.format("%x", din.readShort()));
                System.out.println("Class: 0x" + String.format("%x", din.readShort()));
                int counter = authority + additional; // authority and additional record count
                short type = 0x0000;
                short addrLen = 0x0000;
                if (answer != 0x0000) {
                    System.out.println("Field: 0x" + String.format("%x", din.readShort()));
                    type = din.readShort();
                    System.out.println("Type: 0x" + String.format("%x", type));
                    System.out.println("Class: 0x" + String.format("%x", din.readShort()));
                    System.out.println("TTL: 0x" + String.format("%x", din.readInt()));

                    addrLen = din.readShort();
                    System.out.println("Len: 0x" + String.format("%x", addrLen));

                    if(requestType == 0x0001)
                    if (type == 0x0001 && answer != 0x0000) {
                        String[] array = new String[4];
                        String address = null;
                        String res = null;
                        System.out.print("Address: ");
                        for (int i = 0; i < addrLen; i++) {
                            array[i] = "" + String.format("%d", (din.readByte() & 0xFF));
                        }
                        res = String.join(".", array);
                        if(!result.containsKey(domain))
                        result.put(domain, res);
                        System.out.println(res);
                        writer.write(res);
                        writer.newLine();
                        break;
                    }
                    if(requestType == 0x001c){
                            String[] array = new String[8];
                            String address = null;
                            String res = null;
                            System.out.print("Address: ");
                            for (int i = 0; i < addrLen/2; i++) {
                                    array[i] = "" + String.format("%x", (din.readShort()));
                            }
                            res = String.join(":", array);
                            if(!result.containsKey(domain))
                                result.put(domain, res);
                            System.out.println(res);
                            writer.write(res);
                            writer.newLine();
                            break;
                    }


                    if(requestType == 0x0005) {
                        recLen = 0;
                        recLen = din.readByte();
                        int temp = 0b11000000;

                        if((recLen & temp) == 0b11000000) {
                            byte value0 = din.readByte();
                            int value1 = recLen & 0b00111111;
                            int value2 = value0 & 0b11111111;
                            int finalValue = (((byte) value1) << 8) | (byte) (value2);
                            finalValue = finalValue - 12; // because we want to start pointer from a specific line
                            for (Map.Entry<Integer, String> entry : myPointer.entrySet()) {
                                if(entry.getKey() >= finalValue)
                                System.out.printf(entry.getValue() + ".");
                            }
                        }
                        while (recLen > 0) {
                            byte[] record = new byte[recLen];
                            for (int i = 0; i < recLen; i++) {
                                record[i] = din.readByte();
                            }
                            System.out.printf(new String(record, "UTF-8") + ".");
                            recLen = din.readByte();
                        }
                         temp = 0b11000000;
                        if((recLen & temp) == 0b11000000){
                            byte value0 = din.readByte();
                            int value1 = recLen & 0b00111111;
                            int value2 = value0 & 0b11111111;
                            int finalValue = (((byte)value1) << 8) | (byte)(value2);
                            finalValue = finalValue - 12; // because we want to start pointer from a specific line
                            for (Map.Entry<Integer, String> entry : myPointer.entrySet()) {
                                if(entry.getKey() >= finalValue)
                                    System.out.printf(entry.getValue() + ".");
                            }
                        }
                        System.out.println();
                        break;
                    }
                }

                while (counter > 0) {

                    System.out.println("Field: 0x" + String.format("%x", din.readShort()));
                    type = din.readShort();
                    System.out.println("Type: 0x" + String.format("%x", type));
                    System.out.println("Class: 0x" + String.format("%x", din.readShort()));
                    System.out.println("TTL: 0x" + String.format("%x", din.readInt()));

                    addrLen = din.readShort();
                    System.out.println("Len: 0x" + String.format("%x", addrLen));

                    if (answer == 0x0000 && additional == 0)
                        break;

                    if (type == 0x0001 && answer == 0x0000) {
                        String[] array = new String[4];
                        String address = null;
                        for (int i = 0; i < addrLen; i++) {
                            array[i] = "" + String.format("%d", (din.readByte() & 0xFF)); // needs modification
                        }
                        address = String.join(".", array);
                        destinationArray.add(address);

                    }
                    String pass = null;

                    if (type != 0x0001) {
                        System.out.println(addrLen);
                       for (int i = 0; i < addrLen; i++) {
                                byte k = din.readByte();
                            pass = "" + String.format("%d", (k & 0xFF)) + "."; // needs modification
                        }
                    }

                    counter--;

                }
                if (type == 0x0001 && answer != 0x0000)
                    break;

            }

        }
    }
}
